import QtQuick 2.15
import QtQuick.Controls 2.15

ApplicationWindow {
    visible: true
    width: 640
    height: 480
    title: "Catch the Square Game"
   property int scor: 0
    property int score: 0
   property var rectangles: []
       property bool functionEnabled: true
    Rectangle {
        id: gameArea
        anchors.fill: parent
        Item {
            anchors.fill: parent
            focus: true
            Keys.onPressed: (event)=> {
                if (event.key === Qt.Key_P) {
                    console.log("move left");

                     functionEnabled = !functionEnabled;

                    event.accepted = true;
                }
            }
        }
        Timer {
            id: spawnTimer
            interval: 1000
            running:functionEnabled
            repeat: true

            onTriggered:         function spawnSquare() {
                var square = Qt.createQmlObject(
                    '  import QtQuick 2.15
                      import QtQuick.Controls 2.15

                        Rectangle {
                        id: square
                        width: Math.floor(Math.random() * (100 - 50 + 1)) + 50;
                        height: Math.floor(Math.random() * (100 - 50 + 1)) + 50;
color: [
            "red",      // 0: Red
            "green",    // 1: Green
            "blue"      // 2: Blue
        ][ Math.floor(Math.random() * 3)];
                        radius: 10;
                        property real rotationSpeed: Math.random() * 10;
                        x: Math.random() * (gameArea.width - width);
                        y: Math.random() * (gameArea.height - height);

                        RotationAnimation on rotation {
                            id: rotationAnimation
                            target: square
                            property: "rotation"
                            from: 0
                            to: 360
                            duration: 1000
                            loops: Animation.Infinite
                        }
                                 NumberAnimation on x { to: Math.random() * (gameArea.width - width); duration: 2000 }
                        NumberAnimation on y { to: Math.random() * (gameArea.height - height); duration: 2000 }
                        MouseArea {
                            anchors.fill: parent;
                            onClicked: {
 function myFunction() {
if ((width + height) >= 100 && (width + height) < 150) {

                   scor=5;
                }
else  {

                   scor=1;
                }
                }  myFunction();
                                square.destroy();
                                score += scor;
                            }
                        }
 NumberAnimation on opacity {
        to: 0
        duration: 2000

        onRunningChanged: {
            if (!running) {
                console.log("Destroying...")
                square.destroy();

            }
        }
    }
                      }', gameArea);




            }
        }


    }

    Text {
        text: "Score: " + score
        anchors.top: parent.top
        anchors.right: parent.right
        font.pixelSize: 24
    }
}
